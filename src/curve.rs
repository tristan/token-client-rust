extern crate rand;
extern crate crypto;

use self::rand::{OsRng, Rng};

use self::crypto::curve25519::{GeP3,Fe,ge_scalarmult_base,sc_reduce,sc_muladd};
use self::crypto::ed25519::{verify};
use self::crypto::digest::Digest;
use self::crypto::sha2::{Sha512};

static FE_ONE : Fe = Fe([1,0,0,0,0,0,0,0,0,0]);

pub fn curve25519_sign(private_key: &[u8;32], message: &[u8]) -> [u8; 64] {
    let ed_pubkey_point = ge_scalarmult_base(private_key);
    let ed_pubkey = ed_pubkey_point.to_bytes();
    let signbit = ed_pubkey[31] & 0x80;

    // random
    let mut rng = OsRng::new().ok().unwrap();
    let mut random = [0u8; 64];
    rng.fill_bytes(&mut random);

    let mut sigout = crypto_sign_modified(&message, private_key, &ed_pubkey, &random);
    sigout[63] &= 0x7F;
    sigout[63] |= signbit;
    sigout
}

fn crypto_sign_modified(message: &[u8], secret_key: &[u8;32], public_key: &[u8;32], random: &[u8;64]) -> [u8;64] {
    let hdr: [u8;32] = [0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF];
    let nonce = {
        let mut hash_output: [u8; 64] = [0; 64];
        let mut hasher = Sha512::new();
        hasher.input(&hdr);
        hasher.input(secret_key);
        hasher.input(message);
        hasher.input(random);
        hasher.result(&mut hash_output);
        sc_reduce(&mut hash_output[0..64]);
        hash_output
    };

    let r: GeP3 = ge_scalarmult_base(&nonce);

    let hram = {
        let mut hash_output: [u8; 64] = [0; 64];
        let mut hasher = Sha512::new();
        hasher.input(&r.to_bytes());
        hasher.input(public_key);
        hasher.input(message);
        hasher.result(&mut hash_output);
        sc_reduce(&mut hash_output[0..64]);
        hash_output
    };

    let mut s = [0u8; 32];
    sc_muladd(&mut s, &hram, secret_key, &nonce);

    let mut sm = [0u8; 64];
    for (result_byte, source_byte) in (&mut sm[0..32]).iter_mut().zip(r.to_bytes().iter()) {
        *result_byte = *source_byte;
    }
    for (result_byte, source_byte) in (&mut sm[32..64]).iter_mut().zip(s.iter()) {
        *result_byte = *source_byte;
    }
    sm
}

pub fn curve25519_verify(public_key: &[u8;32], message: &[u8], signature: &[u8;64]) -> bool {
    let mont_x = Fe::from_bytes(public_key);
    let ed_y = (mont_x - FE_ONE) * (mont_x + FE_ONE).invert();
    let mut ed_pubkey = ed_y.to_bytes();
    ed_pubkey[31] &= 0x7F;
    ed_pubkey[31] |= signature[63] & 0x80;
    let mut verifybuf = vec![0u8; message.len() + 64];
    for (result_byte, source_byte) in (&mut verifybuf[0..64]).iter_mut().zip(signature.iter()) {
        *result_byte = *source_byte;
    }
    for (result_byte, source_byte) in (&mut verifybuf[64..]).iter_mut().zip(message.iter()) {
        *result_byte = *source_byte;
    }
    verifybuf[63] &= 0x7F;
    verify(message, &ed_pubkey, &verifybuf)
}

#[cfg(test)]
mod tests {

    use super::*;

    #[test]
    fn test_crypto_sign_modified() {

        macro_rules! run_test_case {
            ($msg:expr, $sk:expr, $edpk:expr, $random:expr, $sig:expr, $signbit:expr, $finalbit:expr) => {
                let msg: [u8; 33] = $msg;
                let privkey: [u8; 32] = $sk;
                let ed_pubkey: [u8; 32] = $edpk;
                let random: [u8; 64] = $random;
                let expected_sig: [u8; 64] = $sig;
                let sigout = crypto_sign_modified(&msg, &privkey, &ed_pubkey, &random);
                assert!(sigout[0..32] == expected_sig[0..32]);
                assert!(sigout[32..64] == expected_sig[32..64]);
                assert!((sigout[63] & 0x7F) | $signbit == $finalbit);
            };
        }

        run_test_case!(
            // msg
            [0x05, 0x40, 0xf2, 0x6b, 0x32, 0xda, 0xed, 0xd6, 0xf4, 0xff, 0x71, 0x25, 0x4c, 0x4e, 0x01, 0xc3,
             0xbc, 0x07, 0x9b, 0x68, 0x98, 0xf2, 0x79, 0xe9, 0xa3, 0x2f, 0xc7, 0x3b, 0x68, 0xab, 0xc2, 0x36,
             0x12],
            // secret key
            [0x80, 0x5a, 0xfd, 0xb6, 0x4a, 0x0a, 0xa5, 0xb1, 0xe4, 0x4d, 0xd3, 0x92, 0xc5, 0x87, 0x2e, 0x9b,
             0x1e, 0xeb, 0xa8, 0xec, 0x5a, 0x14, 0x44, 0xb5, 0xfd, 0x3b, 0xa2, 0x24, 0x35, 0x0f, 0x70, 0x70],
            // ed_pubkey
            [0xb1, 0x55, 0xec, 0xe0, 0x15, 0x78, 0xef, 0x76, 0x33, 0x86, 0x32, 0x1c, 0x73, 0x10, 0x11, 0x96,
             0x9c, 0xcf, 0x44, 0xda, 0xe2, 0x0d, 0x6c, 0x47, 0x68, 0x6f, 0x01, 0x0e, 0xed, 0x9b, 0x1b, 0x14],
            // random
            [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
             0x16, 0x17, 0x18, 0x19, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x30, 0x31,
             0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
             0x48, 0x49, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x60, 0x61, 0x62, 0x63],
            // expected signature
            [0x6e, 0xa7, 0x67, 0x88, 0xa2, 0xd2, 0xa0, 0x8b, 0xba, 0xc7, 0x4b, 0x73, 0xdc, 0xda, 0xc3, 0xfc,
             0x54, 0x24, 0x51, 0x3e, 0xf8, 0x87, 0x00, 0xd3, 0xae, 0xa5, 0x27, 0x21, 0x03, 0x1f, 0x49, 0x5c,
             0x46, 0x5f, 0xb5, 0xb3, 0x23, 0x2b, 0xd2, 0x7e, 0xb8, 0xaf, 0x29, 0x60, 0xcf, 0x62, 0x01, 0x0d,
             0xb7, 0x78, 0x2f, 0x02, 0xc1, 0xde, 0x6b, 0x78, 0x65, 0x2b, 0xf6, 0xec, 0xdb, 0x4b, 0x42, 0x07],
            // sign_bit + modified final bit
            0x00, 0x07
        );

        // Test #0
        run_test_case!(
            //msg
            [0x05, 0xbf, 0x69, 0x5a, 0x1e, 0xe7, 0xca, 0x2c, 0x74, 0x28, 0x9d, 0xe7, 0x50, 0x10, 0x4d, 0x62,
             0x84, 0x3c, 0xfa, 0xc9, 0x9a, 0x4b, 0x23, 0xcc, 0x39, 0x84, 0xa3, 0x80, 0x32, 0x0c, 0xbc, 0x84,
             0x1d],
            // curve25519_privkey
            [0xe8, 0xb0, 0xf7, 0x02, 0x8c, 0x15, 0xc5, 0xc6, 0x6d, 0xf9, 0x50, 0x61, 0xdb, 0xa1, 0x63, 0x6d,
             0x98, 0x31, 0xef, 0x55, 0x0d, 0xba, 0x94, 0x8d, 0x34, 0x7c, 0x08, 0x76, 0x2f, 0x60, 0x58, 0x50],
            // ed_pubkey
            [0xec, 0xe4, 0x66, 0x55, 0x5b, 0x7b, 0x25, 0x3d, 0x96, 0x50, 0xa7, 0x14, 0x33, 0xf5, 0x87, 0x40,
             0x4e, 0x62, 0x00, 0x18, 0x85, 0x69, 0x5b, 0x88, 0x6e, 0xed, 0xe2, 0xe3, 0x15, 0xcd, 0x78, 0x36],
            // random
            [0x00, 0xe7, 0x04, 0x7a, 0xb7, 0xa5, 0xa0, 0xb3, 0x10, 0x38, 0xd8, 0x0b, 0xc0, 0x71, 0x33, 0xd8,
             0xd9, 0x27, 0xe9, 0x7b, 0xc6, 0x20, 0xf0, 0x21, 0x6d, 0x1c, 0xd6, 0x71, 0x13, 0xbb, 0x96, 0xcc,
             0xd1, 0x93, 0xb6, 0xb1, 0x88, 0xd8, 0x93, 0xdf, 0x16, 0x5a, 0xaa, 0x41, 0x36, 0x5e, 0xc0, 0x97,
             0x58, 0x31, 0xd2, 0xed, 0xc4, 0x81, 0x63, 0x9d, 0x8a, 0xff, 0xc9, 0xf1, 0xea, 0xa9, 0x4d, 0x63],
            // expected_pre_sig
            [0x4d, 0x98, 0xde, 0x06, 0x0d, 0x61, 0x87, 0x6e, 0xb6, 0xbc, 0x48, 0xe8, 0x60, 0x37, 0xf1, 0x68,
             0x68, 0x64, 0xa6, 0x62, 0x57, 0xbc, 0x98, 0xea, 0xf9, 0x27, 0x8f, 0x58, 0xc9, 0x68, 0x3c, 0xeb,
             0x91, 0x38, 0x91, 0x08, 0x80, 0xac, 0xca, 0x32, 0xf2, 0x5b, 0x2e, 0x2c, 0xb9, 0x4b, 0x6c, 0x6c,
             0x4d, 0xd5, 0x28, 0x0c, 0xf8, 0x41, 0xba, 0x1f, 0xe0, 0xeb, 0x6c, 0x59, 0x4d, 0x7b, 0xad, 0x06],
            // sign_bit + modified final bit
            0x00, 0x06
        );

        // Test #1
        run_test_case!(
            //msg
            [0x05, 0xd4, 0xe1, 0x14, 0x69, 0x6e, 0xb0, 0x22, 0x95, 0x83, 0x07, 0xbc, 0xf3, 0xad, 0x9d, 0x47,
             0x2a, 0xea, 0x3f, 0xd2, 0x23, 0x42, 0x79, 0x62, 0xfc, 0x40, 0x47, 0x5b, 0x14, 0xf1, 0x02, 0x34,
             0x48],
            // curve25519_privkey
            [0x58, 0xf8, 0xd6, 0xc7, 0x4d, 0x2e, 0x49, 0x84, 0x8b, 0x36, 0x56, 0x39, 0x42, 0x70, 0xdd, 0x04,
             0x05, 0x86, 0xd8, 0xa1, 0x4a, 0x8f, 0x26, 0x12, 0x93, 0x90, 0x52, 0xb8, 0x21, 0xd1, 0x9b, 0x66],
            // ed_pubkey
            [0xe4, 0x7d, 0x9a, 0xa3, 0xcb, 0x95, 0x1a, 0xd6, 0x2a, 0x4c, 0xe7, 0x03, 0xa6, 0x5e, 0x98, 0xc5,
             0x6d, 0x5d, 0x55, 0xdd, 0xd3, 0x76, 0xb6, 0xa2, 0xc4, 0x47, 0xc0, 0xf4, 0xaa, 0xf1, 0xfe, 0x1a],
            // random
            [0xad, 0xbc, 0x04, 0x68, 0x49, 0x23, 0x44, 0x20, 0xc1, 0x46, 0x85, 0xbf, 0x58, 0x71, 0x96, 0x6b,
             0x76, 0xdd, 0x8d, 0x32, 0x7c, 0x6c, 0x44, 0xdb, 0xc2, 0x2d, 0x49, 0xea, 0x94, 0x85, 0x4a, 0x69,
             0x30, 0x49, 0xef, 0xe6, 0x02, 0xb9, 0x8a, 0x88, 0xfe, 0xdb, 0x62, 0x34, 0x68, 0x3a, 0xf2, 0x73,
             0xe8, 0x96, 0x8d, 0xeb, 0xc9, 0x61, 0xf5, 0x98, 0xe0, 0xae, 0x60, 0x85, 0x7e, 0x99, 0xb8, 0x24],
            // expected_pre_sig
            [0x96, 0x35, 0xdc, 0x67, 0x5c, 0x18, 0xbd, 0xd3, 0xeb, 0x39, 0x6f, 0x77, 0xdc, 0xf5, 0x57, 0xfe,
             0x67, 0x62, 0xe9, 0x5e, 0x25, 0x1d, 0xeb, 0xf4, 0x55, 0x0e, 0x84, 0x5b, 0xd4, 0xd1, 0x17, 0x03,
             0x6a, 0x20, 0x61, 0x9b, 0x3b, 0x35, 0x6f, 0x26, 0x8a, 0x6c, 0xaa, 0x26, 0x8a, 0x22, 0x3c, 0xb0,
             0x07, 0x71, 0x10, 0x19, 0x53, 0xd3, 0xaa, 0x05, 0x98, 0x6a, 0x5f, 0x43, 0x91, 0x16, 0xd3, 0x01],
            // sign_bit + modified final bit
            0x00, 0x01
        );

        // Test #2
        run_test_case!(
            //msg
            [0x05, 0xfe, 0x50, 0x84, 0xae, 0x7a, 0x49, 0xc6, 0xec, 0x61, 0x17, 0xfb, 0x62, 0xad, 0xa1, 0x5d,
             0xbb, 0xa1, 0xe9, 0x63, 0xd9, 0xf0, 0x33, 0x86, 0x0f, 0xe3, 0x2e, 0x3a, 0x78, 0x94, 0xdc, 0xbc,
             0x56],
            // curve25519_privkey
            [0x20, 0x5c, 0x21, 0xe8, 0x5a, 0x98, 0xf0, 0x63, 0x88, 0x1c, 0x7d, 0x51, 0xb2, 0xf6, 0x81, 0x00,
             0x3a, 0x86, 0xc9, 0x9c, 0xbe, 0x6d, 0xf4, 0x0f, 0x22, 0x12, 0xc4, 0xf0, 0x06, 0xa4, 0x4f, 0x50],
            // ed_pubkey
            [0xb2, 0xc0, 0xdf, 0x51, 0xbb, 0x2d, 0x91, 0x5f, 0xcc, 0x81, 0x57, 0xa1, 0x0d, 0x18, 0x40, 0xd7,
             0xdf, 0xbe, 0xe9, 0x79, 0x70, 0x00, 0x31, 0x27, 0xcf, 0xb7, 0x61, 0xe4, 0xcd, 0x14, 0x63, 0x48],
            // random
            [0x72, 0xbb, 0xd4, 0x8b, 0x40, 0x8c, 0xa2, 0xa6, 0x2e, 0x02, 0xb9, 0x73, 0x0d, 0x63, 0x99, 0x18,
             0x63, 0x53, 0x7f, 0xab, 0xd2, 0x1f, 0x07, 0x63, 0x63, 0x58, 0x7e, 0xa1, 0xb2, 0xf1, 0xe7, 0xda,
             0xd8, 0xe7, 0xf9, 0x4d, 0x52, 0x2b, 0x04, 0xc7, 0xbd, 0x6d, 0xf2, 0xfb, 0x90, 0x9d, 0x73, 0x94,
             0x78, 0x1d, 0xbe, 0x3d, 0x98, 0xa9, 0x0e, 0xac, 0x0d, 0x3d, 0x18, 0xb6, 0x07, 0xe8, 0x1e, 0x63],
            // expected_pre_sig
            [0xdd, 0xca, 0x41, 0x68, 0x0b, 0x84, 0xd5, 0x69, 0x2d, 0x53, 0x57, 0x58, 0x56, 0xe8, 0x0a, 0x43,
             0xab, 0x1b, 0x33, 0x88, 0x7e, 0x39, 0x63, 0x2b, 0xe0, 0x83, 0x8c, 0xfe, 0x21, 0x54, 0xb4, 0xe7,
             0x01, 0x5b, 0x39, 0xae, 0xe2, 0xeb, 0x80, 0xe0, 0x54, 0xe6, 0xa9, 0x5f, 0x00, 0x27, 0x22, 0x9c,
             0xa7, 0x85, 0x70, 0x91, 0xda, 0xd7, 0x97, 0x0e, 0x3b, 0x34, 0x4d, 0x9f, 0x41, 0x24, 0x6c, 0x00],
            // sign_bit + modified final bit
            0x00, 0x00
        );

        // Test #3
        run_test_case!(
            //msg
            [0x05, 0x5c, 0x0b, 0x0e, 0xaa, 0xc4, 0x6a, 0xf9, 0xaa, 0xc8, 0xd8, 0x8c, 0x57, 0xb0, 0x40, 0x04,
             0x94, 0xe0, 0x6c, 0x11, 0x1b, 0x00, 0x3d, 0xbb, 0xd7, 0x07, 0x33, 0x1f, 0x50, 0x2b, 0x8f, 0xdb,
             0x5e],
            // curve25519_privkey
            [0x10, 0x2f, 0xd8, 0xba, 0x14, 0x4a, 0xab, 0x90, 0x51, 0x75, 0xd3, 0xc8, 0x82, 0xd7, 0xde, 0x6a,
             0xd5, 0x11, 0xaf, 0x05, 0x4e, 0x4f, 0x48, 0x54, 0x55, 0x75, 0x61, 0x7b, 0x80, 0x6a, 0xc7, 0x66],
            // ed_pubkey
            [0xbd, 0x95, 0xb0, 0xaa, 0x46, 0xf3, 0x41, 0x0d, 0xc3, 0x67, 0xbc, 0x32, 0x35, 0xbb, 0x39, 0xf8,
             0x4d, 0xfe, 0xbf, 0x6d, 0xcf, 0xfb, 0x5b, 0xcc, 0x90, 0xce, 0x42, 0xa9, 0x0b, 0x60, 0x06, 0xa8],
            // random
            [0xef, 0xb7, 0xc5, 0x4e, 0x1b, 0xbc, 0xe0, 0x85, 0xe8, 0x6c, 0x77, 0x11, 0xc1, 0xa1, 0x7b, 0x19,
             0x89, 0x50, 0x1c, 0xba, 0xc8, 0x6f, 0xd6, 0xc7, 0xad, 0x5a, 0x1c, 0x6c, 0xbf, 0xbe, 0xc5, 0xd0,
             0x80, 0x0d, 0xba, 0x72, 0x1c, 0xb1, 0x21, 0x51, 0x88, 0xc5, 0x6a, 0x82, 0x5d, 0x4e, 0xb3, 0xf0,
             0xf4, 0xcc, 0x83, 0xda, 0x89, 0x66, 0xe5, 0xbf, 0x72, 0x21, 0x9a, 0x88, 0x27, 0x82, 0x97, 0xf9],
            // expected_pre_sig
            [0x13, 0x0d, 0x58, 0xf6, 0xc7, 0x05, 0x56, 0x55, 0x89, 0xd7, 0x20, 0x93, 0xd7, 0xb3, 0xe7, 0xdb,
             0x13, 0x4e, 0x00, 0xd7, 0x1a, 0xd2, 0x77, 0x38, 0x4a, 0x95, 0x54, 0x14, 0xce, 0x8d, 0x80, 0x02,
             0x6a, 0x55, 0xd2, 0xfd, 0xed, 0x87, 0x10, 0x18, 0x4b, 0xd2, 0x39, 0xe1, 0xc5, 0xed, 0xff, 0x47,
             0x1e, 0x16, 0x32, 0xad, 0x95, 0x35, 0x7a, 0x86, 0xa5, 0x79, 0x40, 0x71, 0x7c, 0x6e, 0xe0, 0x0d],
            // sign_bit + modified final bit
            0x80, 0x8d
        );

        // Test #4
        run_test_case!(
            //msg
            [0x05, 0x2a, 0x3f, 0xc0, 0xaf, 0x08, 0x6a, 0xb5, 0xaf, 0x50, 0x25, 0x65, 0x1c, 0x4b, 0x9c, 0x36,
             0xb4, 0xb9, 0x9e, 0x34, 0x5e, 0xc2, 0xce, 0x54, 0xf7, 0x15, 0x4e, 0x2e, 0x53, 0x37, 0xfe, 0x5a,
             0x64],
            // curve25519_privkey
            [0x58, 0xce, 0x68, 0x5c, 0x68, 0x6d, 0x01, 0x4a, 0x5b, 0xb9, 0xf4, 0x80, 0x48, 0x47, 0x48, 0x99,
             0xa0, 0xac, 0x92, 0x31, 0xca, 0xbc, 0xf3, 0x07, 0xc0, 0x9b, 0x36, 0x7b, 0x56, 0x1b, 0x7f, 0x4a],
            // ed_pubkey
            [0xbd, 0xc4, 0xec, 0x86, 0x15, 0xc9, 0xe2, 0x5c, 0x82, 0x4f, 0x4b, 0x67, 0x4e, 0xb9, 0x3f, 0x58,
             0x76, 0x4f, 0x0a, 0xf5, 0xea, 0x8f, 0x4a, 0xec, 0x72, 0x6d, 0x9f, 0x75, 0x70, 0x96, 0x55, 0xa1],
            // random
            [0x5c, 0x23, 0x33, 0x25, 0xb1, 0x42, 0x2b, 0x65, 0x16, 0xec, 0xe0, 0xe1, 0x38, 0xbc, 0x93, 0xea,
             0x72, 0xc4, 0x90, 0x93, 0x8e, 0x0e, 0xde, 0x3b, 0xb9, 0xd9, 0x68, 0xc2, 0x36, 0x7a, 0xd0, 0xc6,
             0x76, 0x30, 0xe7, 0x06, 0x32, 0xfc, 0xf4, 0x8d, 0x7e, 0x36, 0x10, 0xe4, 0xa2, 0x7f, 0xba, 0x5d,
             0xf1, 0x97, 0x35, 0xe3, 0xdd, 0x5f, 0xd0, 0x7b, 0x90, 0x89, 0x0e, 0x40, 0x35, 0x7f, 0x35, 0xb1],
            // expected_pre_sig
            [0x2f, 0x75, 0x28, 0x31, 0x72, 0xd5, 0x3d, 0x91, 0xf0, 0x1d, 0x2e, 0x0d, 0x5e, 0x6e, 0x02, 0xa2,
             0x6e, 0xd0, 0xb7, 0x9c, 0x9a, 0x3b, 0x44, 0x63, 0x20, 0x87, 0x7f, 0x9f, 0x90, 0xd6, 0x95, 0x4b,
             0x4e, 0x60, 0x7b, 0x76, 0xb9, 0x4d, 0xae, 0x1f, 0xc8, 0xbd, 0x75, 0x0a, 0x54, 0xb6, 0xa2, 0x9d,
             0xcf, 0x24, 0xb1, 0x44, 0xfb, 0x94, 0x51, 0x35, 0x22, 0xb5, 0x2c, 0xdf, 0x85, 0x04, 0xb5, 0x06],
            // sign_bit + modified final bit
            0x80, 0x86
        );

        // Test #5
        run_test_case!(
            //msg
            [0x05, 0xe5, 0x76, 0x7e, 0x08, 0xce, 0x41, 0x7f, 0x56, 0xe9, 0xda, 0x44, 0xeb, 0x16, 0x89, 0x98,
             0x12, 0xb6, 0x1a, 0x15, 0x92, 0x00, 0xe4, 0x7b, 0x06, 0x4b, 0xc2, 0x0f, 0x6b, 0xe2, 0xed, 0xe2,
             0x16],
            // curve25519_privkey
            [0xf0, 0xc4, 0xde, 0x00, 0x01, 0x4f, 0x83, 0xc2, 0x43, 0xcd, 0x8f, 0x93, 0x0e, 0xd7, 0xdd, 0xed,
             0xcb, 0x65, 0xba, 0xeb, 0xb2, 0x74, 0x1e, 0x36, 0xff, 0x8f, 0x72, 0xef, 0x23, 0x9a, 0x08, 0x6b],
            // ed_pubkey
            [0x0e, 0xaf, 0x11, 0xc2, 0x0f, 0xb7, 0xc3, 0x48, 0x45, 0x96, 0xa3, 0x61, 0x41, 0x67, 0xf5, 0x74,
             0x31, 0xf3, 0xd1, 0xfd, 0x64, 0x9f, 0xa0, 0x03, 0x6f, 0xb6, 0x64, 0x36, 0x43, 0x0c, 0x4e, 0x28],
            // random
            [0xf3, 0x29, 0x92, 0x94, 0x1a, 0x1c, 0xf1, 0xb0, 0xff, 0xea, 0xa1, 0x80, 0x26, 0x68, 0x53, 0xf8,
             0xf7, 0xea, 0x68, 0x97, 0x60, 0x46, 0x9d, 0x89, 0xdc, 0x91, 0x87, 0x03, 0xec, 0xda, 0x5a, 0xa4,
             0x95, 0xe3, 0x2a, 0x5f, 0x37, 0x7d, 0xc3, 0x09, 0x49, 0x8e, 0x81, 0x54, 0xc2, 0xda, 0x1c, 0xba,
             0xc4, 0x43, 0x6e, 0x5f, 0x65, 0x75, 0xf4, 0x77, 0xfb, 0xbc, 0x29, 0x1c, 0x13, 0x9c, 0x7f, 0x76],
            // expected_pre_sig
            [0x53, 0xf7, 0xae, 0x5e, 0xbd, 0xf5, 0x26, 0x45, 0xbc, 0xda, 0x0c, 0x94, 0x3b, 0x13, 0x79, 0x18,
             0x38, 0xfe, 0xfa, 0x55, 0xf8, 0xe7, 0xe8, 0xf1, 0xd2, 0x4b, 0x9c, 0x01, 0x09, 0x84, 0x23, 0x19,
             0xd5, 0xce, 0xa4, 0x3f, 0x10, 0x4d, 0x50, 0x24, 0x6a, 0x9c, 0xee, 0x25, 0xb7, 0xcf, 0x5a, 0x40,
             0x5b, 0x4a, 0x5a, 0x00, 0x6d, 0x07, 0xfc, 0x7d, 0xa5, 0xeb, 0x5c, 0x9d, 0x1f, 0x9e, 0xe2, 0x07],
            // sign_bit + modified final bit
            0x00, 0x07
        );

        // Test #6
        run_test_case!(
            //msg
            [0x05, 0xfb, 0xb8, 0x4c, 0xcf, 0x58, 0xb5, 0x3a, 0xfd, 0x4b, 0xd6, 0x20, 0xef, 0x1f, 0x94, 0xaa,
             0x9b, 0x1f, 0x29, 0x5a, 0x32, 0x4d, 0x28, 0x0e, 0xd2, 0x3b, 0x3d, 0xf0, 0xb1, 0x72, 0x09, 0x0a,
             0x34],
            // curve25519_privkey
            [0x80, 0x60, 0x74, 0x09, 0x2d, 0xa0, 0x2e, 0x00, 0xac, 0x09, 0xa1, 0x39, 0xae, 0x86, 0xb6, 0x32,
             0x41, 0x96, 0xad, 0x51, 0x1a, 0x75, 0xf5, 0x9a, 0x71, 0x3a, 0x4f, 0xf1, 0x0d, 0xda, 0x7e, 0x73],
            // ed_pubkey
            [0xf7, 0xb0, 0x40, 0xaa, 0xd9, 0xd3, 0x96, 0x0c, 0x30, 0x61, 0x1c, 0x4f, 0xe0, 0xc6, 0x70, 0xd3,
             0x3d, 0xa6, 0x53, 0x68, 0x5c, 0x5d, 0x5e, 0xdd, 0xf5, 0x19, 0xba, 0x5b, 0x4b, 0x3f, 0x84, 0xa1],
            // random
            [0xdc, 0x48, 0x26, 0xf5, 0x47, 0x40, 0x01, 0xde, 0xf9, 0x9c, 0x78, 0x6c, 0x6b, 0x33, 0x57, 0x3c,
             0x5a, 0xd6, 0xf7, 0x5f, 0x3a, 0xe7, 0xf7, 0x87, 0xf3, 0x73, 0x11, 0x6c, 0x79, 0x84, 0xf8, 0x40,
             0x80, 0x02, 0xb5, 0x0d, 0x68, 0x37, 0x35, 0x26, 0x28, 0xa2, 0x46, 0x25, 0x46, 0x2b, 0x84, 0xc6,
             0x90, 0x51, 0xca, 0x79, 0xad, 0x92, 0x23, 0x0c, 0x7c, 0x1e, 0x66, 0x8c, 0xac, 0x22, 0x65, 0x85],
            // expected_pre_sig
            [0x57, 0x82, 0x95, 0xa9, 0x39, 0xb3, 0x63, 0xad, 0x5d, 0xba, 0x30, 0xdd, 0xf9, 0x70, 0x06, 0x91,
             0xc3, 0x13, 0x0a, 0x62, 0x4e, 0x05, 0xb6, 0xeb, 0x53, 0xb8, 0x78, 0x6e, 0xee, 0x6a, 0x17, 0xc4,
             0x21, 0xf0, 0x5c, 0xbb, 0xf2, 0x58, 0x8e, 0x59, 0x4a, 0x30, 0x5d, 0x4a, 0x2f, 0x10, 0x1c, 0xb2,
             0x7e, 0x1a, 0x8d, 0xe0, 0xec, 0x86, 0x7a, 0x7b, 0xea, 0x8c, 0xd0, 0x85, 0xed, 0x0e, 0xff, 0x0b],
            // sign_bit + modified final bit
            0x80, 0x8b
        );

        // Test #7
        run_test_case!(
            //msg
            [0x05, 0xee, 0x6f, 0x5b, 0x99, 0x69, 0x82, 0x60, 0x87, 0x0d, 0xdb, 0xde, 0x5c, 0xae, 0xfe, 0x91,
             0xd4, 0x05, 0x5b, 0x5f, 0x6e, 0xb8, 0xbd, 0xbf, 0x52, 0x82, 0xbf, 0x4a, 0x83, 0xb5, 0xb1, 0x4b,
             0x6c],
            // curve25519_privkey
            [0x98, 0x5a, 0x32, 0xab, 0x58, 0x73, 0xac, 0xc3, 0xee, 0x96, 0xea, 0x84, 0xbd, 0x8c, 0xee, 0x32,
             0xc6, 0x90, 0xc1, 0xb2, 0x43, 0xf9, 0x75, 0x29, 0x43, 0xc8, 0x65, 0xc6, 0x8b, 0x96, 0xfa, 0x51],
            // ed_pubkey
            [0xef, 0x49, 0xe2, 0x6f, 0xcc, 0xd0, 0xf1, 0x5e, 0xe2, 0x0f, 0x8a, 0xe2, 0xc7, 0xed, 0x7b, 0x92,
             0x59, 0x7d, 0x65, 0xfa, 0x08, 0x12, 0xda, 0xc5, 0xb5, 0x02, 0x41, 0xcf, 0x0a, 0xfb, 0x9c, 0x55],
            // random
            [0x2c, 0x08, 0xdc, 0x0d, 0x02, 0xfc, 0x91, 0xfc, 0x1b, 0x77, 0x93, 0x5a, 0xcd, 0xc7, 0x4e, 0x1a,
             0xa2, 0x69, 0x1e, 0x38, 0xd8, 0x71, 0x1c, 0xe3, 0x95, 0x43, 0x39, 0xfb, 0xa2, 0x7a, 0x24, 0x9f,
             0x69, 0x62, 0x80, 0x38, 0xea, 0x9d, 0xe0, 0xa5, 0x31, 0x5a, 0x28, 0x49, 0x25, 0x2d, 0x3a, 0x76,
             0x7b, 0x21, 0x0e, 0x1d, 0xf7, 0xa3, 0x77, 0x3f, 0x61, 0x10, 0xbb, 0x43, 0x76, 0x2b, 0x7f, 0x1d],
            // expected_pre_sig
            [0x1c, 0xc1, 0xfe, 0x27, 0x24, 0xaa, 0x5d, 0xcf, 0x1c, 0x9d, 0x29, 0xf5, 0x96, 0x90, 0x18, 0x01,
             0x02, 0xe2, 0xe5, 0x2d, 0x55, 0xb4, 0x91, 0x8f, 0x9d, 0x51, 0x8b, 0x79, 0x73, 0x0a, 0xcc, 0x90,
             0x5f, 0xcb, 0x7a, 0x74, 0x89, 0x69, 0x74, 0xd4, 0x52, 0x6a, 0xa6, 0xe7, 0x1c, 0xf5, 0x91, 0x4c,
             0x29, 0x3a, 0xcb, 0x8f, 0x56, 0xcd, 0xf9, 0x2d, 0x19, 0xf6, 0x43, 0x16, 0x9d, 0xd0, 0xdc, 0x00],
            // sign_bit + modified final bit
            0x00, 0x00
        );

        // Test #8
        run_test_case!(
            //msg
            [0x05, 0x00, 0xd7, 0x70, 0x90, 0xdd, 0xe2, 0x1b, 0x1a, 0x4d, 0x61, 0x38, 0x2a, 0xa5, 0xa6, 0xd2,
             0x62, 0x9b, 0x47, 0x94, 0x94, 0xfa, 0x41, 0x28, 0x81, 0x01, 0xf0, 0x6a, 0xeb, 0x86, 0xf9, 0xbf,
             0x0f],
            // curve25519_privkey
            [0xd0, 0x86, 0x41, 0x4c, 0x60, 0xcd, 0x27, 0xc4, 0xfb, 0xd2, 0xe4, 0x0b, 0xe7, 0xd1, 0x2d, 0x78,
             0x5f, 0xed, 0x71, 0xea, 0x6d, 0x07, 0xf1, 0xba, 0xd6, 0x5c, 0xfe, 0x6c, 0xb7, 0xdb, 0xcf, 0x5c],
            // ed_pubkey
            [0xb0, 0xb6, 0xfb, 0xd5, 0x9e, 0xd1, 0x29, 0xad, 0xaf, 0xf8, 0xfc, 0xc4, 0x9d, 0xd7, 0xbf, 0x24,
             0x24, 0x7d, 0x2a, 0xb6, 0x4f, 0xc7, 0x95, 0xfc, 0x2a, 0x34, 0x58, 0xf2, 0xe9, 0x57, 0xfa, 0x66],
            // random
            [0x47, 0x08, 0x48, 0x77, 0xb8, 0x47, 0xb0, 0x89, 0xfe, 0x2a, 0x8e, 0x9e, 0x43, 0x7e, 0x6b, 0x17,
             0xf5, 0xc1, 0x73, 0x02, 0xe3, 0x2b, 0x14, 0x5c, 0x8e, 0xed, 0xe3, 0x46, 0xa4, 0xb7, 0x1f, 0x0f,
             0xd2, 0x97, 0x44, 0xbc, 0xbd, 0x63, 0x68, 0xbf, 0xcb, 0x18, 0x00, 0x4d, 0x19, 0xe3, 0x36, 0xde,
             0xbb, 0x98, 0x58, 0x0f, 0x65, 0x6e, 0x7e, 0xae, 0xd1, 0x27, 0x28, 0xf6, 0xbb, 0x60, 0x5e, 0x6d],
            // expected_pre_sig
            [0x12, 0xd7, 0xef, 0x0e, 0x82, 0xd9, 0xe1, 0x52, 0xa7, 0x0d, 0xac, 0x11, 0x81, 0xd9, 0x1c, 0xbd,
             0xd8, 0xd2, 0x7d, 0x3f, 0x59, 0xbf, 0x1a, 0xff, 0x70, 0xd9, 0x44, 0xe4, 0x3f, 0x72, 0x73, 0x0f,
             0x17, 0xf7, 0xa3, 0x24, 0x2a, 0x39, 0x67, 0xc1, 0x08, 0xd3, 0x2a, 0x6b, 0x90, 0x0a, 0xe8, 0x9b,
             0x3e, 0x4e, 0x26, 0xc6, 0xae, 0x9b, 0x7b, 0x6f, 0x55, 0xd3, 0x4b, 0xe8, 0x60, 0x5c, 0x2b, 0x02],
            // sign_bit + modified final bit
            0x00, 0x02
        );

        // Test #9
        run_test_case!(
            //msg
            [0x05, 0x58, 0x94, 0x5c, 0xbf, 0x52, 0xf8, 0x4e, 0x8e, 0x93, 0x88, 0x60, 0x7d, 0x08, 0xfa, 0xcd,
             0x8e, 0x5a, 0x2d, 0x97, 0x62, 0x7b, 0x71, 0x03, 0x87, 0xac, 0x10, 0x39, 0xe5, 0x52, 0xdd, 0x7e,
             0x14],
            // curve25519_privkey
            [0xd0, 0x40, 0x3b, 0x74, 0x43, 0xbb, 0x70, 0xd3, 0x26, 0x11, 0x7f, 0x5f, 0x03, 0x19, 0x17, 0x79,
             0x49, 0xf0, 0x8c, 0x93, 0xf8, 0x02, 0x94, 0x59, 0x8b, 0x24, 0xd0, 0x73, 0xb1, 0xe4, 0x33, 0x4a],
            // ed_pubkey
            [0x72, 0x11, 0x23, 0x91, 0x94, 0x74, 0x70, 0x95, 0xac, 0x9a, 0x44, 0xc0, 0x18, 0x98, 0xa5, 0x10,
             0x0a, 0x8e, 0x2f, 0x36, 0x00, 0x95, 0x40, 0x01, 0xa0, 0xa6, 0x59, 0xce, 0xf8, 0xb4, 0xa5, 0x0e],
            // random
            [0x69, 0x98, 0x02, 0x53, 0x1e, 0x9b, 0x5d, 0x26, 0x67, 0xa2, 0x37, 0xe6, 0x3d, 0xcc, 0xfb, 0x2a,
             0x6c, 0xf6, 0x1f, 0xa3, 0xaf, 0xcf, 0x75, 0x58, 0x80, 0xea, 0xf0, 0x61, 0xd5, 0xcd, 0xd1, 0xe3,
             0x98, 0x4c, 0x1f, 0x77, 0x6a, 0x42, 0x36, 0x2e, 0xb3, 0x6e, 0xdd, 0x2d, 0x8b, 0x74, 0x65, 0x4a,
             0x2a, 0x55, 0x2c, 0x2d, 0x13, 0xa9, 0x0c, 0xbb, 0xa3, 0xe5, 0x69, 0x70, 0x8d, 0x25, 0xea, 0x73],
            // expected_pre_sig
            [0x4f, 0x69, 0xc1, 0xc1, 0xfb, 0x81, 0xef, 0x51, 0x75, 0xef, 0x31, 0x6f, 0xeb, 0x59, 0xce, 0x2b,
             0x81, 0x4a, 0x45, 0x9b, 0x3d, 0xbd, 0x07, 0x32, 0x05, 0x2b, 0xc7, 0xed, 0x6f, 0x18, 0x8a, 0x4f,
             0xa0, 0x52, 0x14, 0xda, 0x9c, 0x60, 0x73, 0xe9, 0x94, 0x79, 0x51, 0x5e, 0xcb, 0xdc, 0x73, 0x24,
             0xdc, 0x28, 0x20, 0x2c, 0x5d, 0xca, 0x8b, 0xd8, 0xed, 0xc1, 0x17, 0x56, 0x42, 0xc3, 0xcc, 0x0b],
            // sign_bit + modified final bit
            0x00, 0x0b
        );
    }

    #[test]
    fn test_ed_pub_key_gen() {

        use super::crypto::curve25519::{ge_scalarmult_base};

        macro_rules! run_test_case {
            ($sk:expr, $edpk:expr) => {
                let privkey: &[u8] = &$sk;
                let expected_ed_pubkey: [u8; 32] = $edpk;

                let ed_pubkey_point = ge_scalarmult_base(privkey);
                let ed_pubkey = ed_pubkey_point.to_bytes();
                assert_eq!(ed_pubkey, expected_ed_pubkey);
            };
        }

        run_test_case!(
            [0xd0, 0x40, 0x3b, 0x74, 0x43, 0xbb, 0x70, 0xd3, 0x26, 0x11, 0x7f, 0x5f, 0x03, 0x19, 0x17, 0x79,
             0x49, 0xf0, 0x8c, 0x93, 0xf8, 0x02, 0x94, 0x59, 0x8b, 0x24, 0xd0, 0x73, 0xb1, 0xe4, 0x33, 0x4a],
            [0x72, 0x11, 0x23, 0x91, 0x94, 0x74, 0x70, 0x95, 0xac, 0x9a, 0x44, 0xc0, 0x18, 0x98, 0xa5, 0x10,
             0x0a, 0x8e, 0x2f, 0x36, 0x00, 0x95, 0x40, 0x01, 0xa0, 0xa6, 0x59, 0xce, 0xf8, 0xb4, 0xa5, 0x0e]
        );

    }

    #[test]
    fn test_sign_and_verify_cooperate() {

        use super::crypto::curve25519::{curve25519_base};

        macro_rules! run_test_case {
            ($msg:expr, $sk:expr, $expsk:expr) => {
                let sk: [u8; 32] = $sk;
                let expectedsk: [u8; 32] = $expsk;
                let pk: [u8; 32] = curve25519_base(&sk);
                let msg: [u8; 33] = $msg;

                assert_eq!(expectedsk, pk);

                let sig = curve25519_sign(&sk, &msg);
                assert!(curve25519_verify(&pk, &msg, &sig))
            };
        }

        run_test_case!(
            [0x05, 0xb7, 0xf4, 0x46, 0xc1, 0xbe, 0x91, 0xb9, 0xa7, 0x22, 0xcd, 0x18, 0xee, 0x69, 0x51, 0xd6,
             0xe0, 0x68, 0xc7, 0xc8, 0xf6, 0x08, 0x65, 0x39, 0x80, 0xac, 0x74, 0x51, 0x0d, 0x76, 0x83, 0xa1,
             0x7d],
            [0xe0, 0x5b, 0x9e, 0x1d, 0x70, 0xd3, 0x2b, 0x03, 0xeb, 0x31, 0xef, 0x3b, 0xc8, 0x34, 0x9c, 0x47,
             0x52, 0xfc, 0xe5, 0x80, 0xdc, 0x41, 0x52, 0x6a, 0xcd, 0x6f, 0x8a, 0x5f, 0x8a, 0x88, 0xbe, 0x56],
            [0x6f, 0x51, 0xdd, 0x01, 0xe5, 0x93, 0x92, 0x78, 0xd9, 0x05, 0x84, 0x3e, 0x89, 0x9e, 0xf3, 0xa3,
             0x16, 0x53, 0xb2, 0xab, 0x4b, 0xf6, 0x43, 0x3d, 0xa6, 0xe9, 0x6b, 0xca, 0xd1, 0xda, 0xb3, 0x07]
        );

        run_test_case!(
            [0x05, 0xd0, 0x40, 0x3b, 0x74, 0x43, 0xbb, 0x70, 0xd3, 0x26, 0x11, 0x7f, 0x5f, 0x03, 0x19, 0x17,
             0x79, 0x49, 0xf0, 0x8c, 0x93, 0xf8, 0x02, 0x94, 0x59, 0x8b, 0x24, 0xd0, 0x73, 0xb1, 0xe4, 0x33,
             0x4a],
            [0xd0, 0x1f, 0x29, 0xa4, 0x6d, 0x03, 0xa8, 0xe3, 0xce, 0xe9, 0x91, 0x83, 0x77, 0xc8, 0xab, 0xfe,
             0x4f, 0xda, 0x65, 0x38, 0xbd, 0xc0, 0x43, 0xfd, 0x4c, 0xfe, 0xc4, 0xe1, 0xaf, 0xd7, 0x46, 0x40] ,
            [0x57, 0x79, 0x71, 0xdc, 0xed, 0xe2, 0xc3, 0xcf, 0x68, 0x5f, 0x06, 0xaf, 0xb3, 0xdc, 0x74, 0x8f,
             0xab, 0xf1, 0x0a, 0x56, 0xab, 0x88, 0xb3, 0x51, 0x67, 0x6d, 0x82, 0x26, 0x66, 0x74, 0x99, 0x41]
        );

    }

    #[test]
    fn test_verify_sign() {

        macro_rules! run_test_case {
            ($msg:expr, $pk:expr, $sig:expr) => {
                let msg: [u8; 33] = $msg;
                let pk: [u8; 32] = $pk;
                let sig: [u8; 64] = $sig;
                assert!(curve25519_verify(&pk, &msg, &sig) == true);
            };
        }

        // Test #0
        run_test_case!(
            //msg
            [0x05, 0x50, 0xe1, 0xeb, 0xed, 0x09, 0x7e, 0x70, 0xd4, 0xcd, 0x7b, 0xcd, 0x2c, 0xe6, 0x07, 0x7c,
             0x64, 0xad, 0xfb, 0xd3, 0x43, 0x5f, 0xdf, 0x1d, 0x6a, 0x83, 0x57, 0xdb, 0x28, 0x92, 0xc2, 0xec,
             0x7e],
            // public key
            [0x7c, 0x05, 0xd8, 0xea, 0x1d, 0xa3, 0x80, 0x2c, 0x9b, 0x1b, 0xcb, 0xe2, 0x05, 0xd1, 0x36, 0x7c,
             0xf3, 0x1a, 0xf7, 0x08, 0xe1, 0x60, 0xd2, 0xcd, 0x28, 0x43, 0xef, 0xcc, 0x07, 0x8d, 0xe7, 0x57],
            // signature
            [0xa9, 0x7e, 0x31, 0x3c, 0x74, 0x72, 0xbd, 0x4f, 0xc3, 0xdc, 0xab, 0x77, 0x13, 0x6f, 0x18, 0xfa,
             0x55, 0x1b, 0x73, 0x66, 0xd9, 0x2c, 0x43, 0x58, 0xa0, 0x1d, 0xf3, 0x54, 0x25, 0x11, 0x5e, 0xf0,
             0x7a, 0x61, 0x08, 0xe3, 0xb6, 0xaf, 0x38, 0x2c, 0x46, 0xb6, 0x0c, 0x30, 0x40, 0x7e, 0x5b, 0x01,
             0x12, 0x57, 0xfc, 0xad, 0x25, 0xaf, 0xc4, 0x81, 0x3b, 0x01, 0x71, 0xa1, 0x4b, 0x84, 0x54, 0x06]
        );

        // Test #1
        run_test_case!(
            //msg
            [0x05, 0xd8, 0xda, 0x2d, 0x8d, 0x36, 0x00, 0xe5, 0xb5, 0x23, 0xac, 0x1b, 0xb9, 0xd1, 0x2a, 0x82,
             0x58, 0xad, 0x53, 0x27, 0xa2, 0x1a, 0x06, 0xaa, 0xe6, 0x58, 0x48, 0x7d, 0xc3, 0x3c, 0x59, 0x64,
             0x76],
            // public key
            [0x82, 0x71, 0xea, 0x02, 0x40, 0x44, 0x1b, 0x6a, 0x85, 0x44, 0x57, 0xc2, 0x68, 0xff, 0x9d, 0xf6,
             0x46, 0xd2, 0xdd, 0xe2, 0xb8, 0xcd, 0x76, 0x6a, 0xa7, 0x03, 0xac, 0x10, 0xfb, 0xd0, 0xe1, 0x75],
            // signature
            [0x25, 0xc0, 0xbc, 0x56, 0x48, 0x87, 0xbc, 0xf9, 0x87, 0x93, 0xd7, 0x6d, 0x7e, 0x1d, 0xfa, 0xf3,
             0xd2, 0x27, 0xc4, 0x84, 0xa0, 0xd7, 0x94, 0xec, 0xcd, 0xce, 0x43, 0xb5, 0x08, 0xcd, 0xc3, 0x9c,
             0xb1, 0x63, 0xc6, 0xe1, 0xda, 0xd3, 0xc4, 0x55, 0xa2, 0x0e, 0x91, 0x35, 0x49, 0x7e, 0x63, 0xa8,
             0x0e, 0x79, 0x97, 0x96, 0xf5, 0x98, 0x91, 0x3d, 0x0a, 0x9b, 0x14, 0xa0, 0x3a, 0xdf, 0x7d, 0x86]
        );

        // Test #2
        run_test_case!(
            //msg
            [0x05, 0x1c, 0x34, 0x33, 0x79, 0xc6, 0x14, 0x27, 0xa8, 0x8e, 0x14, 0x9d, 0x70, 0xb8, 0x65, 0x11,
             0xd5, 0xc2, 0x82, 0x96, 0x8d, 0xf8, 0x75, 0x5d, 0xe9, 0xa9, 0xe1, 0x5c, 0x1e, 0x6b, 0xc1, 0xa0,
             0x5e],
            // public key
            [0x1a, 0x12, 0x66, 0x4f, 0x56, 0x99, 0xd7, 0x6d, 0x9e, 0x9e, 0x8f, 0x17, 0xb7, 0x97, 0x71, 0xe6,
             0x0d, 0xd8, 0x79, 0xe1, 0x31, 0x7a, 0x6d, 0x49, 0xff, 0x1b, 0xdf, 0x3a, 0x7c, 0x25, 0x23, 0x64],
            // signature
            [0xe1, 0x8d, 0x27, 0x9c, 0x4d, 0x9e, 0x47, 0x76, 0x95, 0xeb, 0x0f, 0xd2, 0x26, 0xa6, 0x4d, 0x6c,
             0x3b, 0xa7, 0x66, 0x04, 0xa1, 0x99, 0xf4, 0x2e, 0x89, 0x3f, 0x37, 0xa9, 0x68, 0xc8, 0xce, 0xe5,
             0xf0, 0x5e, 0xc5, 0x0a, 0x8d, 0xab, 0x25, 0x05, 0xcb, 0x76, 0x24, 0x72, 0x99, 0x66, 0x40, 0xa6,
             0x5c, 0x6a, 0x1b, 0x50, 0x47, 0x8d, 0xb3, 0x1d, 0xdf, 0x3d, 0xad, 0x3b, 0x37, 0xa2, 0xc3, 0x07]
        );

        // Test #3
        run_test_case!(
            //msg
            [0x05, 0x57, 0x6a, 0x8f, 0x9e, 0x76, 0x7f, 0xd7, 0xc6, 0xea, 0x57, 0xca, 0x42, 0xaa, 0xf5, 0xd9,
             0x2c, 0x73, 0x95, 0xa9, 0x8d, 0x39, 0xd6, 0xf6, 0xe8, 0xb6, 0x24, 0x76, 0x4f, 0x6a, 0xaa, 0x32,
             0x70],
            // public key
            [0x98, 0x37, 0x97, 0x39, 0x3c, 0xb8, 0xff, 0xdd, 0x82, 0xfc, 0x1f, 0x3c, 0x4d, 0x37, 0x9f, 0xbc,
             0x66, 0x84, 0xa3, 0x90, 0xde, 0xc7, 0xe0, 0xb7, 0x1f, 0xbf, 0xe4, 0xbf, 0x99, 0x5b, 0x6b, 0x4c],
            // signature
            [0xfa, 0xaf, 0x3d, 0xae, 0xb4, 0xe6, 0x6a, 0x36, 0x86, 0xf4, 0x7b, 0xd0, 0x3d, 0xf4, 0x2e, 0xa9,
             0x84, 0x7b, 0x9d, 0x1d, 0x6e, 0x3b, 0x6f, 0x73, 0x3a, 0x68, 0x4e, 0x99, 0x34, 0xf3, 0x71, 0x49,
             0x6c, 0x83, 0x5b, 0xf3, 0xfd, 0x6c, 0x8e, 0x0f, 0x90, 0xbe, 0xd1, 0x11, 0x94, 0x3f, 0xde, 0x3f,
             0xb3, 0x1c, 0xd1, 0x4b, 0xf3, 0xab, 0x13, 0xf6, 0x98, 0xbe, 0xa9, 0xdd, 0x0b, 0xb8, 0xd8, 0x82]
        );

        // Test #4
        run_test_case!(
            //msg
            [0x05, 0xe8, 0x02, 0x88, 0x3a, 0xba, 0x52, 0xba, 0x4e, 0xa7, 0x1b, 0xc4, 0x86, 0xda, 0x44, 0x7f,
             0xec, 0xeb, 0xa2, 0x47, 0xcc, 0x9e, 0xde, 0x1d, 0x73, 0xbd, 0x82, 0xa3, 0xf1, 0x1a, 0x95, 0x5c,
             0x0c],
            // public key
            [0x0e, 0xf5, 0x6a, 0x32, 0x59, 0x82, 0x09, 0x0d, 0xc9, 0x48, 0x9f, 0x00, 0x74, 0x56, 0x9b, 0x04,
             0xb4, 0xd9, 0x9b, 0xee, 0xe8, 0xda, 0x20, 0x14, 0x9f, 0xcf, 0xec, 0xd5, 0x8a, 0x09, 0x95, 0x79],
            // signature
            [0x59, 0x7c, 0xe1, 0x88, 0xd5, 0xc7, 0x70, 0xbe, 0x86, 0x35, 0xd5, 0x33, 0xba, 0xd6, 0x74, 0x6d,
             0xca, 0xb4, 0x6f, 0xb7, 0x39, 0x51, 0xe1, 0xb2, 0x02, 0x9e, 0x03, 0xa7, 0xbf, 0xc3, 0xe1, 0xf3,
             0x2b, 0x4b, 0x01, 0x07, 0xa9, 0x59, 0xe8, 0x65, 0x41, 0xe7, 0xa0, 0x39, 0x80, 0x2d, 0x95, 0xe7,
             0x8f, 0x2c, 0x03, 0x32, 0x02, 0xdb, 0xe8, 0xea, 0xbc, 0x1f, 0xd7, 0x5d, 0x39, 0xa2, 0xfd, 0x05]
        );

        // Test #5
        run_test_case!(
            //msg
            [0x05, 0xf0, 0x42, 0x78, 0x2c, 0x48, 0x96, 0x76, 0x5f, 0x54, 0x5a, 0x7d, 0xe5, 0x37, 0x71, 0x32,
             0xe1, 0xe4, 0x3b, 0xe9, 0x3d, 0xf4, 0xa5, 0x3c, 0x32, 0x28, 0x3b, 0x5d, 0x7c, 0x70, 0x21, 0x94,
             0x32],
            // public key
            [0x6f, 0x70, 0x90, 0x09, 0x0e, 0x2d, 0x77, 0xc3, 0xe3, 0xc1, 0xe9, 0xd2, 0xde, 0x9b, 0x00, 0x13,
             0xd5, 0xca, 0x15, 0x80, 0x47, 0xba, 0x09, 0xaf, 0x8d, 0xa7, 0xed, 0xc5, 0xb7, 0x2c, 0x81, 0x37],
            // signature
            [0xc5, 0x13, 0x54, 0x62, 0x6e, 0x28, 0xa5, 0xe2, 0xbf, 0xe7, 0xf7, 0xd6, 0x26, 0x2c, 0xfc, 0x84,
             0x2c, 0xbd, 0x41, 0xf7, 0xa9, 0x2a, 0x50, 0x94, 0x6f, 0xc9, 0xeb, 0x53, 0xf5, 0xd4, 0xe3, 0xac,
             0xee, 0x30, 0x8a, 0x0e, 0x27, 0x8b, 0x40, 0xa8, 0x18, 0x5d, 0x51, 0x8f, 0xc0, 0x06, 0xa4, 0xa5,
             0xa8, 0xf5, 0x17, 0x26, 0x81, 0xf8, 0x06, 0x26, 0x73, 0xc9, 0x8e, 0x6c, 0x1a, 0xe6, 0x16, 0x02]
        );

        // Test #6
        run_test_case!(
            //msg
            [0x05, 0xca, 0xf6, 0x81, 0x27, 0x41, 0xb0, 0x93, 0x07, 0xa6, 0x73, 0xc6, 0xe5, 0x14, 0x37, 0x5f,
             0x1a, 0x26, 0xb8, 0xbf, 0x2f, 0x6d, 0x19, 0x5e, 0xfb, 0x82, 0x7e, 0xe5, 0xaa, 0xc6, 0x3a, 0xc4,
             0x60],
            // public key
            [0xe6, 0xe1, 0x76, 0xd3, 0xae, 0x6b, 0xb0, 0xfe, 0x1a, 0x9f, 0xbe, 0x08, 0xc4, 0x40, 0x4d, 0x13,
             0x8e, 0x91, 0x36, 0x20, 0xbc, 0x62, 0x27, 0xc3, 0x1d, 0x8b, 0x1b, 0xfb, 0x9d, 0x29, 0xd1, 0x3a],
            // signature
            [0x73, 0xe6, 0xa2, 0x3d, 0xbb, 0x7b, 0x39, 0x35, 0x54, 0xc3, 0xa4, 0xe3, 0x16, 0xf5, 0x5d, 0xd0,
             0x97, 0x2c, 0x6d, 0x36, 0x2f, 0xcb, 0x24, 0xe7, 0xd9, 0xdf, 0x88, 0xcf, 0x36, 0x12, 0x48, 0x89,
             0xfc, 0x28, 0xe1, 0x9d, 0x9b, 0x3c, 0x33, 0xbc, 0xfb, 0xb3, 0x49, 0x45, 0x5a, 0x08, 0x37, 0x22,
             0x27, 0xa4, 0x2a, 0x98, 0x60, 0x69, 0x20, 0x9b, 0xd3, 0x08, 0xf5, 0x05, 0xc1, 0x9d, 0x41, 0x08]
        );

        // Test #7
        run_test_case!(
            //msg
            [0x05, 0xcc, 0x8e, 0xb8, 0x2e, 0x7b, 0xd4, 0x32, 0x64, 0x28, 0xd9, 0xee, 0xd1, 0x14, 0x22, 0xe7,
             0x6e, 0x5a, 0x97, 0x8f, 0xd1, 0xbd, 0xf6, 0xfa, 0xdf, 0x9d, 0x5b, 0x41, 0xc1, 0xeb, 0x58, 0x0d,
             0x69],
            // public key
            [0xde, 0xd7, 0xd1, 0x2d, 0xff, 0xf2, 0xb5, 0x4f, 0x50, 0x8c, 0xd8, 0x33, 0xd1, 0xc8, 0x74, 0x57,
             0xb2, 0x26, 0x5e, 0x24, 0x32, 0x87, 0x0b, 0x59, 0xc0, 0x3f, 0x6d, 0x75, 0xe8, 0x26, 0x22, 0x58],
            // signature
            [0xf5, 0xa8, 0xd1, 0x4e, 0x36, 0xde, 0xd5, 0xfa, 0x9d, 0x05, 0x07, 0xfc, 0xb7, 0x0d, 0xf9, 0x84,
             0xa1, 0xdc, 0x04, 0xb5, 0xd3, 0x5e, 0x46, 0x5f, 0x54, 0x89, 0xfb, 0x7d, 0x7e, 0xee, 0xc4, 0x70,
             0xc2, 0x7f, 0x83, 0x72, 0x67, 0xbd, 0x72, 0xdb, 0xc8, 0x0e, 0x53, 0x17, 0xd9, 0x7d, 0x59, 0xf7,
             0x26, 0xf4, 0x9b, 0x3e, 0x93, 0x89, 0x87, 0x2d, 0x61, 0xb0, 0x38, 0x61, 0x70, 0xa9, 0xe2, 0x84]
        );

        // Test #8
        run_test_case!(
            //msg
            [0x05, 0x39, 0x93, 0x53, 0x6a, 0xac, 0x00, 0x3e, 0x70, 0xa0, 0x0d, 0xd9, 0x6d, 0xfd, 0xb5, 0xe3,
             0xc4, 0x44, 0x53, 0xe8, 0x4a, 0x75, 0x50, 0x73, 0x0c, 0x7c, 0xf0, 0x9c, 0xb3, 0x5d, 0x71, 0xdd,
             0x2c],
            // public key
            [0x55, 0x53, 0xaf, 0x21, 0xf4, 0x1f, 0x0a, 0x4d, 0x31, 0x8c, 0x06, 0x40, 0x13, 0x1f, 0xa2, 0xf3,
             0x0d, 0xc2, 0x9f, 0x99, 0x7e, 0x55, 0x6d, 0x92, 0xb1, 0x5f, 0x1f, 0xf2, 0x39, 0xc7, 0x7d, 0x5b],
            // signature
            [0xc9, 0x02, 0x45, 0xee, 0x83, 0x9e, 0x61, 0x59, 0x77, 0xe9, 0x31, 0x6c, 0x97, 0x4c, 0x0d, 0x21,
             0xb7, 0x09, 0x1e, 0x85, 0x37, 0xce, 0x7e, 0xfd, 0xf3, 0x1f, 0x6a, 0xc9, 0xbc, 0xc9, 0x04, 0xfe,
             0x38, 0xd2, 0x89, 0x26, 0x55, 0x99, 0x9c, 0x5c, 0x33, 0x90, 0x67, 0xf5, 0xdd, 0x97, 0x1c, 0x3b,
             0xb0, 0x7e, 0x29, 0xc6, 0x8d, 0x29, 0x1d, 0x1d, 0xf7, 0x0e, 0x5a, 0x0e, 0xf3, 0xd1, 0x58, 0x80]
        );

        // Test #9
        run_test_case!(
            //msg
            [0x05, 0xcd, 0xf2, 0x8a, 0x09, 0x30, 0x8c, 0x5e, 0x2d, 0xb7, 0x98, 0xe6, 0xbe, 0xba, 0x5c, 0x02,
             0x4e, 0x92, 0xe3, 0x94, 0x4a, 0xfa, 0x50, 0x91, 0x41, 0xf3, 0x59, 0x67, 0x1b, 0xd1, 0xcf, 0x8d,
             0x23],
            // public key
            [0x2b, 0x9a, 0x05, 0x81, 0xad, 0xfd, 0xfa, 0xae, 0x68, 0x72, 0x3c, 0x88, 0xc0, 0x8e, 0x91, 0xa2,
             0xf2, 0x08, 0x90, 0xc8, 0x66, 0xae, 0x86, 0x26, 0x6e, 0xf3, 0x0a, 0x92, 0x70, 0x8c, 0xae, 0x7e],
            // signature
            [0x48, 0xef, 0xa1, 0xa3, 0x8c, 0x5e, 0x86, 0x24, 0x79, 0x69, 0x85, 0x04, 0x51, 0x50, 0x9c, 0x71,
             0x54, 0xe0, 0x92, 0xdf, 0x00, 0x65, 0x46, 0xd6, 0x00, 0x71, 0x00, 0xad, 0xad, 0xba, 0x80, 0xe7,
             0x0d, 0x42, 0x8e, 0x63, 0x5b, 0x04, 0x83, 0x1f, 0x0c, 0x6c, 0x63, 0xe5, 0xd6, 0x42, 0xed, 0x17,
             0x9c, 0xbe, 0x8a, 0xbc, 0x36, 0x4c, 0x83, 0x3b, 0x3a, 0xb2, 0x7a, 0x1c, 0xa8, 0xf5, 0xbd, 0x8b]
        );
    }
}
